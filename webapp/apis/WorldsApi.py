from authlib.integrations.flask_oauth2 import current_token
from eme.data_access import get_repo
from flask import request

from core.dal.worlds import World
from core.worlds import access, factory, players
from core.worlds.players import JoinException
from webapp.apiutils import ApiResponse
from webapp.services.auth import require_oauth


class WorldsApi():
    def __init__(self, server):
        self.server = server
        self.group = 'WorldsApi'
        self.route = 'api/worlds'

        self.repo = get_repo(World)

        self.server.preset_endpoints({
            "GET /api/worlds": 'WorldsApi.get_list',
            "POST /api/worlds": 'WorldsApi.post_create',

            #"GET /api/worlds/<wid>": 'WorldsApi.get_view',
            # # "PUT /api/worlds/<wid>": 'WorldsApi.put_edit',
            "PATCH /api/worlds/<wid>": 'WorldsApi.patch_edit',
            "DELETE /api/worlds/<wid>": 'WorldsApi.delete_delete',

            "POST /api/worlds/<wid>/player": 'WorldsApi.post_join',
            # "DELETE /api/worlds/<wid>/player": 'WorldsApi.delete_leave',
            #
            # "POST /api/worlds/<wid>/invite": 'WorldsApi.post_invlink',
            # "DELETE /api/worlds/<wid>/invite": 'WorldsApi.delete_invlink',
        })

    """
    policies:
                Users       World       Countries       Other ents
    list        admin       admin       anyone          member of w
    get         admin       anyone      anyone          member of w
    create      no one      worldless   -               country owner
    edit        no one      owner       no one          owner
    delete      no one      owner       no one          no one

    join w      -           worldless
    leave w     -           member
    """

    @require_oauth('profile')
    def get_list(self):
        user = current_token.user

        if not access.verify('admin', user):
            return ApiResponse(status=403)

        #worlds = self.repo.list_all()
        worlds = self.repo.session.query(World)

        return ApiResponse([world.view for world in worlds])

    @require_oauth('profile')
    def post_create(self):
        user = current_token.user

        if not access.verify('worldless', user):
            return ApiResponse(status=403)

        try:
            d = request.json

            # fool proof attributes:
            if 'owner_id' in d:
                d.pop('owner_id')

            world, countries = factory.create_world(owner=user, **d)


            self.repo.create(world)
            self.repo.create_all(countries)
        except JoinException as e:
            return ApiResponse({
                "err": e.reason
            }, status=403)
        except Exception as e:
            raise e
            return ApiResponse({
                "err": str(e)
            }, status=500)

        return ApiResponse(world.view)

    @require_oauth('profile')
    def get_view(self, wid):
        if not access.verify('anyone', user):
            return ApiResponse(status=403)

    @require_oauth('profile')
    def patch_edit(self, wid):
        user = current_token.user
        world = self.repo.get(wid)

        if not access.verify('owner', user, world):
            return ApiResponse(status=403)

        to_patch = request.json.copy()
        response = {
            "wid": world.wid,
        }

        # special cases for invlink editing
        if 'invlink' in to_patch:
            invlink = to_patch['invlink']

            if invlink is None:
                # reset invlink
                invlink = None
            elif len(invlink) != 6:
                # autogenerated invlink
                invlink = factory.create_invlink()
                to_patch.pop('invlink')

            world.invlink = invlink
            response["invlink"] = world.invlink

        # otherwise normal editing happens:
        for attr, v in to_patch.items():
            if user.admin or access.can_edit(world, attr):
                setattr(world, attr, v)
                response[attr] = v

        return ApiResponse(response)

    @require_oauth('profile')
    def delete_delete(self, wid):
        user = current_token.user
        world = self.repo.get(wid)

        if not access.verify('admin', user):
            return ApiResponse(status=403)

        # todo: later: owner can also delete world if it has no other players
        self.repo.delete(world)

        return ApiResponse(status=204)

    @require_oauth('profile')
    def post_join(self, wid):
        """
        User joins world
        """
        user = current_token.user
        world = self.repo.get(wid)

        if not world:
            return ApiResponse({
                "err": "world_does_not_exist"
            }, status=404)

        if access.verify('wordless', user):
            try:
                players.join_world(world, user, request.form.get('iso'))
            except JoinException as e:
                return ApiResponse({
                    "err": e.reason
                }, status=403)
        else:
            # user is already in a world, try to merge them
            try:
                players.merge_worlds(world, user.world)
            except JoinException as e:
                return ApiResponse({
                    "err": e.reason,
                    "names": e.par1
                }, status=403)

        return ApiResponse({
            "wid": user.wid,
            "iso": user.iso,
            "link": world.invlink
        })

    @require_oauth('profile')
    def patch_leave(self):
        user = current_token.user
        world = user.world

        # todo: user leaves world
        if not access.verify('member', user, user.world):
            return ApiResponse(status=403)
